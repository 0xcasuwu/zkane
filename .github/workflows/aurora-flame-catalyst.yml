name: Aurora Flame Catalyst - Mystical Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: crystal-moon-sanctuary-789456
  SERVICE_NAME: ethereal-crystal-nexus
  REGION: us-central1
  ASSETS_VAULT: lunar-essence-vault

jobs:
  weave-mystical-artifacts:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🌙 Summon source code
      uses: actions/checkout@v4

    - name: 🔮 Configure Crystal Moon Sanctuary access
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.CRYSTAL_MOON_SANCTUARY_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: 🌟 Prepare container registry
      run: gcloud auth configure-docker

    - name: ⚡ Install Rust mystical tools
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        override: true

    - name: 🔧 Install WASM weaving tools
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: 🔮 Weave mystical web artifacts
      run: |
        cd crates/zkane-frontend
        echo "🌙 Weaving mystical web artifacts..."
        wasm-pack build --target web --out-dir pkg --release --no-typescript
        echo "✨ Artifacts woven successfully"

    - name: 🌟 Prepare ethereal assets
      run: |
        cd crates/zkane-frontend
        echo "🌟 Preparing ethereal assets..."
        mkdir -p dist
        cp index.html dist/
        cp src/styles.css dist/
        cp -r pkg dist/
        
        # Create mystical favicon
        if [ ! -f "dist/favicon.svg" ]; then
          cat > dist/favicon.svg << 'EOF'
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
          <circle cx="50" cy="50" r="40" fill="#6a0dad"/>
          <text x="50" y="60" text-anchor="middle" fill="white" font-family="Arial" font-size="30" font-weight="bold">🌙</text>
        </svg>
        EOF
        fi
        echo "✨ Ethereal assets prepared"

    - name: 🏺 Store in lunar essence vault
      run: |
        gsutil -m rsync -r -d crates/zkane-frontend/dist/ gs://${{ env.ASSETS_VAULT }}/

    - name: 🔮 Create mystical container manifest
      run: |
        cat > Dockerfile << 'EOF'
        FROM nginx:alpine
        
        # Copy ethereal assets
        COPY crates/zkane-frontend/dist /usr/share/nginx/html
        
        # Configure mystical gateway
        RUN cat > /etc/nginx/conf.d/default.conf << 'NGINXEOF'
        server {
            listen 8080;
            server_name _;
            root /usr/share/nginx/html;
            index index.html;
            
            # Mystical protection headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            add_header X-Mystical-Gateway "Crystal-Moon-Sanctuary" always;
            
            # WASM enchantment
            location ~* \.wasm$ {
                add_header Content-Type application/wasm;
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
            
            # Asset caching spells
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
            
            # Portal routing
            location / {
                try_files $uri $uri/ /index.html;
            }
            
            # Health divination
            location /health {
                access_log off;
                return 200 "ethereal-nexus-healthy\n";
                add_header Content-Type text/plain;
            }
        }
        NGINXEOF
        
        EXPOSE 8080
        CMD ["nginx", "-g", "daemon off;"]
        EOF

    - name: 🏗️ Build and store mystical container
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

    - name: 🌙 Deploy to ethereal realm
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --service-account velvet-storm-oracle@$PROJECT_ID.iam.gserviceaccount.com

    - name: 🔮 Weave DNS enchantments
      env:
        MOONSTONE_WHISPER_KEY: ${{ secrets.MOONSTONE_WHISPER_KEY }}
        MOONSTONE_WHISPER_EMAIL: ${{ secrets.MOONSTONE_WHISPER_EMAIL }}
      run: |
        # Discover ethereal service location
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
          --region=$REGION \
          --format="value(status.url)")
        
        SERVICE_HOSTNAME=$(echo $SERVICE_URL | sed 's|https://||')
        
        echo "🌙 Ethereal service manifested at: $SERVICE_URL"
        echo "🔮 Service hostname: $SERVICE_HOSTNAME"
        
        # Locate mystical realm
        ZONE_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=zkane.app" \
          -H "X-Auth-Email: $MOONSTONE_WHISPER_EMAIL" \
          -H "X-Auth-Key: $MOONSTONE_WHISPER_KEY" \
          -H "Content-Type: application/json")
        
        ZONE_ID=$(echo "$ZONE_RESPONSE" | jq -r '.result[0].id')
        
        if [ "$ZONE_ID" = "null" ] || [ -z "$ZONE_ID" ]; then
          echo "❌ Failed to locate mystical realm for zkane.app"
          exit 1
        fi
        
        echo "🌙 Mystical realm located: $ZONE_ID"
        
        # Check for existing enchantment
        RECORD_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?type=CNAME&name=zkane.app" \
          -H "X-Auth-Email: $MOONSTONE_WHISPER_EMAIL" \
          -H "X-Auth-Key: $MOONSTONE_WHISPER_KEY" \
          -H "Content-Type: application/json")
        
        RECORD_ID=$(echo "$RECORD_RESPONSE" | jq -r '.result[0].id')
        
        if [ "$RECORD_ID" != "null" ] && [ -n "$RECORD_ID" ]; then
          # Update existing enchantment
          echo "🔮 Updating mystical portal enchantment..."
          UPDATE_RESPONSE=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
            -H "X-Auth-Email: $MOONSTONE_WHISPER_EMAIL" \
            -H "X-Auth-Key: $MOONSTONE_WHISPER_KEY" \
            -H "Content-Type: application/json" \
            --data "{\"type\":\"CNAME\",\"name\":\"zkane.app\",\"content\":\"$SERVICE_HOSTNAME\",\"ttl\":120,\"proxied\":true}")
          
          if echo "$UPDATE_RESPONSE" | jq -r '.success' | grep -q true; then
            echo "✨ Mystical portal enchantment updated successfully"
          else
            echo "❌ Failed to update mystical portal enchantment:"
            echo "$UPDATE_RESPONSE"
          fi
        else
          # Create new enchantment
          echo "🌟 Weaving new mystical portal enchantment..."
          CREATE_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
            -H "X-Auth-Email: $MOONSTONE_WHISPER_EMAIL" \
            -H "X-Auth-Key: $MOONSTONE_WHISPER_KEY" \
            -H "Content-Type: application/json" \
            --data "{\"type\":\"CNAME\",\"name\":\"zkane.app\",\"content\":\"$SERVICE_HOSTNAME\",\"ttl\":120,\"proxied\":true}")
          
          if echo "$CREATE_RESPONSE" | jq -r '.success' | grep -q true; then
            echo "✨ Mystical portal enchantment woven successfully"
          else
            echo "❌ Failed to weave mystical portal enchantment:"
            echo "$CREATE_RESPONSE"
          fi
        fi

    - name: 🎉 Mystical deployment complete
      run: |
        echo "🌙✨ Aurora Flame Catalyst deployment ritual complete! ✨🌙"
        echo "🔮 Your mystical application awaits at: https://zkane.app"
        echo "🌟 The Crystal Moon Sanctuary protects your ethereal realm"
        echo "💫 May your code flow like moonlight through the digital cosmos"