name: Deploy ZKane to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: oyl-project-123456
  SERVICE_NAME: empath-witchcraft-hospital
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        override: true

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Build WASM package
      run: |
        cd crates/zkane-frontend
        wasm-pack build --target web --out-dir pkg --release --no-typescript

    - name: Prepare static assets
      run: |
        cd crates/zkane-frontend
        mkdir -p dist
        cp index.html dist/
        cp src/styles.css dist/
        cp -r pkg dist/
        
        # Create favicon if it doesn't exist
        if [ ! -f "dist/favicon.svg" ]; then
          cat > dist/favicon.svg << 'EOF'
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
          <circle cx="50" cy="50" r="40" fill="#007bff"/>
          <text x="50" y="60" text-anchor="middle" fill="white" font-family="Arial" font-size="30" font-weight="bold">Z</text>
        </svg>
        EOF
        fi

    - name: Upload to Cloud Storage
      run: |
        gsutil -m rsync -r -d crates/zkane-frontend/dist/ gs://twilight-ember-sanctuary-assets/

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM nginx:alpine
        
        # Copy static files
        COPY crates/zkane-frontend/dist /usr/share/nginx/html
        
        # Create nginx configuration for SPA
        RUN cat > /etc/nginx/conf.d/default.conf << 'NGINXEOF'
        server {
            listen 8080;
            server_name _;
            root /usr/share/nginx/html;
            index index.html;
            
            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            
            # WASM MIME type
            location ~* \.wasm$ {
                add_header Content-Type application/wasm;
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
            
            # Static assets caching
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
            
            # SPA fallback
            location / {
                try_files $uri $uri/ /index.html;
            }
            
            # Health check endpoint
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
        NGINXEOF
        
        EXPOSE 8080
        CMD ["nginx", "-g", "daemon off;"]
        EOF

    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --service-account filler-season-apathy@$PROJECT_ID.iam.gserviceaccount.com

    - name: Update Cloudflare DNS
      env:
        CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
        CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
      run: |
        # Get the Cloud Run service URL
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
          --region=$REGION \
          --format="value(status.url)")
        
        # Extract the hostname from the URL
        SERVICE_HOSTNAME=$(echo $SERVICE_URL | sed 's|https://||')
        
        echo "Cloud Run service URL: $SERVICE_URL"
        echo "Service hostname: $SERVICE_HOSTNAME"
        
        # Get Cloudflare Zone ID
        ZONE_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=zkane.app" \
          -H "X-Auth-Email: $CLOUDFLARE_EMAIL" \
          -H "X-Auth-Key: $CLOUDFLARE_API_KEY" \
          -H "Content-Type: application/json")
        
        ZONE_ID=$(echo "$ZONE_RESPONSE" | jq -r '.result[0].id')
        
        if [ "$ZONE_ID" = "null" ] || [ -z "$ZONE_ID" ]; then
          echo "Failed to get Zone ID for zkane.app"
          exit 1
        fi
        
        echo "Found Zone ID: $ZONE_ID"
        
        # Check for existing record
        RECORD_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?type=CNAME&name=zkane.app" \
          -H "X-Auth-Email: $CLOUDFLARE_EMAIL" \
          -H "X-Auth-Key: $CLOUDFLARE_API_KEY" \
          -H "Content-Type: application/json")
        
        RECORD_ID=$(echo "$RECORD_RESPONSE" | jq -r '.result[0].id')
        
        if [ "$RECORD_ID" != "null" ] && [ -n "$RECORD_ID" ]; then
          # Update existing record
          echo "Updating existing CNAME record..."
          UPDATE_RESPONSE=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
            -H "X-Auth-Email: $CLOUDFLARE_EMAIL" \
            -H "X-Auth-Key: $CLOUDFLARE_API_KEY" \
            -H "Content-Type: application/json" \
            --data "{\"type\":\"CNAME\",\"name\":\"zkane.app\",\"content\":\"$SERVICE_HOSTNAME\",\"ttl\":120,\"proxied\":true}")
          
          if echo "$UPDATE_RESPONSE" | jq -r '.success' | grep -q true; then
            echo "Successfully updated CNAME record for zkane.app"
          else
            echo "Failed to update CNAME record:"
            echo "$UPDATE_RESPONSE"
          fi
        else
          # Create new record
          echo "Creating new CNAME record..."
          CREATE_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
            -H "X-Auth-Email: $CLOUDFLARE_EMAIL" \
            -H "X-Auth-Key: $CLOUDFLARE_API_KEY" \
            -H "Content-Type: application/json" \
            --data "{\"type\":\"CNAME\",\"name\":\"zkane.app\",\"content\":\"$SERVICE_HOSTNAME\",\"ttl\":120,\"proxied\":true}")
          
          if echo "$CREATE_RESPONSE" | jq -r '.success' | grep -q true; then
            echo "Successfully created CNAME record for zkane.app"
          else
            echo "Failed to create CNAME record:"
            echo "$CREATE_RESPONSE"
          fi
        fi

    - name: Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Your app should be available at: https://zkane.app"
        echo "💡 It may take a few minutes for DNS changes to propagate."