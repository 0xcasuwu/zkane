# Cloud Build configuration for ZKane frontend deployment
# This file defines the CI/CD pipeline for automatic deployment

steps:
  # Step 1: Install Rust and required tools
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Setting up Rust environment..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source ~/.cargo/env
        rustup target add wasm32-unknown-unknown
        cargo install wasm-pack
        cargo install basic-http-server
        echo "Rust setup complete"

  # Step 2: Build the frontend WASM package
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source ~/.cargo/env
        cd crates/zkane-frontend
        echo "Building WASM package..."
        wasm-pack build --target web --out-dir pkg --release --no-typescript
        echo "WASM build complete"

  # Step 3: Prepare static assets
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd crates/zkane-frontend
        echo "Preparing static assets..."
        mkdir -p dist
        cp index.html dist/
        cp src/styles.css dist/
        cp -r pkg dist/
        
        # Create favicon if it doesn't exist
        if [ ! -f "dist/favicon.svg" ]; then
          cat > dist/favicon.svg << 'EOF'
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
          <circle cx="50" cy="50" r="40" fill="#007bff"/>
          <text x="50" y="60" text-anchor="middle" fill="white" font-family="Arial" font-size="30" font-weight="bold">Z</text>
        </svg>
        EOF
        fi
        
        echo "Static assets prepared"

  # Step 4: Upload static assets to Cloud Storage
  - name: 'gcr.io/cloud-builders/gsutil'
    args:
      - '-m'
      - 'rsync'
      - '-r'
      - '-d'
      - 'crates/zkane-frontend/dist/'
      - 'gs://twilight-ember-sanctuary-assets/'

  # Step 5: Create Dockerfile for Cloud Run
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cat > Dockerfile << 'EOF'
        FROM nginx:alpine
        
        # Copy static files
        COPY crates/zkane-frontend/dist /usr/share/nginx/html
        
        # Create nginx configuration for SPA
        RUN cat > /etc/nginx/conf.d/default.conf << 'NGINXEOF'
        server {
            listen 8080;
            server_name _;
            root /usr/share/nginx/html;
            index index.html;
            
            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            
            # WASM MIME type
            location ~* \.wasm$ {
                add_header Content-Type application/wasm;
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
            
            # Static assets caching
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
            
            # SPA fallback
            location / {
                try_files $uri $uri/ /index.html;
            }
            
            # Health check endpoint
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
        NGINXEOF
        
        EXPOSE 8080
        CMD ["nginx", "-g", "daemon off;"]
        EOF
        echo "Dockerfile created"

  # Step 6: Build and push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/empath-witchcraft-hospital:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/empath-witchcraft-hospital:latest'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/empath-witchcraft-hospital:$BUILD_ID'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/empath-witchcraft-hospital:latest'

  # Step 7: Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'empath-witchcraft-hospital'
      - '--image=gcr.io/$PROJECT_ID/empath-witchcraft-hospital:$BUILD_ID'
      - '--region=us-central1'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--port=8080'
      - '--memory=512Mi'
      - '--cpu=1'
      - '--max-instances=10'
      - '--service-account=filler-season-apathy@$PROJECT_ID.iam.gserviceaccount.com'

  # Step 8: Update Cloudflare DNS
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get the Cloud Run service URL
        SERVICE_URL=$(gcloud run services describe empath-witchcraft-hospital \
          --region=us-central1 \
          --format="value(status.url)")
        
        # Extract the hostname from the URL
        SERVICE_HOSTNAME=$(echo $SERVICE_URL | sed 's|https://||')
        
        echo "Cloud Run service URL: $SERVICE_URL"
        echo "Service hostname: $SERVICE_HOSTNAME"
        
        # Store the hostname for the next step
        echo $SERVICE_HOSTNAME > /workspace/service_hostname.txt

  # Step 9: Update Cloudflare DNS record
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Read the service hostname
        SERVICE_HOSTNAME=$(cat /workspace/service_hostname.txt)
        
        # Get Cloudflare credentials from Secret Manager
        CLOUDFLARE_API_KEY=$(gcloud secrets versions access latest --secret="moonstone-whisper-key")
        CLOUDFLARE_EMAIL=$(gcloud secrets versions access latest --secret="moonstone-whisper-key-email")
        
        # Get Cloudflare Zone ID
        ZONE_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=zkane.app" \
          -H "X-Auth-Email: $CLOUDFLARE_EMAIL" \
          -H "X-Auth-Key: $CLOUDFLARE_API_KEY" \
          -H "Content-Type: application/json")
        
        ZONE_ID=$(echo "$ZONE_RESPONSE" | grep -o '"id":"[^"]*' | cut -d'"' -f4 | head -1)
        
        if [ -z "$ZONE_ID" ]; then
          echo "Failed to get Zone ID for zkane.app"
          exit 1
        fi
        
        echo "Found Zone ID: $ZONE_ID"
        
        # Check for existing record
        RECORD_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?type=CNAME&name=zkane.app" \
          -H "X-Auth-Email: $CLOUDFLARE_EMAIL" \
          -H "X-Auth-Key: $CLOUDFLARE_API_KEY" \
          -H "Content-Type: application/json")
        
        RECORD_ID=$(echo "$RECORD_RESPONSE" | grep -o '"id":"[^"]*' | cut -d'"' -f4 | head -1)
        
        if [ -n "$RECORD_ID" ]; then
          # Update existing record
          echo "Updating existing CNAME record..."
          UPDATE_RESPONSE=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
            -H "X-Auth-Email: $CLOUDFLARE_EMAIL" \
            -H "X-Auth-Key: $CLOUDFLARE_API_KEY" \
            -H "Content-Type: application/json" \
            --data "{\"type\":\"CNAME\",\"name\":\"zkane.app\",\"content\":\"$SERVICE_HOSTNAME\",\"ttl\":120,\"proxied\":true}")
          
          if echo "$UPDATE_RESPONSE" | grep -q '"success":true'; then
            echo "Successfully updated CNAME record for zkane.app"
          else
            echo "Failed to update CNAME record:"
            echo "$UPDATE_RESPONSE"
          fi
        else
          # Create new record
          echo "Creating new CNAME record..."
          CREATE_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
            -H "X-Auth-Email: $CLOUDFLARE_EMAIL" \
            -H "X-Auth-Key: $CLOUDFLARE_API_KEY" \
            -H "Content-Type: application/json" \
            --data "{\"type\":\"CNAME\",\"name\":\"zkane.app\",\"content\":\"$SERVICE_HOSTNAME\",\"ttl\":120,\"proxied\":true}")
          
          if echo "$CREATE_RESPONSE" | grep -q '"success":true'; then
            echo "Successfully created CNAME record for zkane.app"
          else
            echo "Failed to create CNAME record:"
            echo "$CREATE_RESPONSE"
          fi
        fi

# Build options
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: '100'
  logging: CLOUD_LOGGING_ONLY

# Timeout for the entire build
timeout: '1800s'

# Substitutions for environment variables
substitutions:
  _REGION: 'us-central1'
  _SERVICE_NAME: 'empath-witchcraft-hospital'